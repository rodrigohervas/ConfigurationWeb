@inject IConfiguration  configuration;
@model List<ContactViewModel>;

@{
    ViewData["Title"] = "Team";
}


<div class="info-row">

    <div class="info-col">

        <h2 class="configuration_info_title">Team</h2>

        <h4 class="configuration_info_title">Meet our team: </h4>

        <div class="configuration_info">
            <p>
                The configuration is defined in a custom configuration file (<code>appsettings.Team.json</code>), and added to the application configuration in
                <code>Program.ConfigureAppConfiguration()</code>, while the app is starting up.
            </p>
            <p>
                Then the configuration info can be used from anywhere in the app, by injecting a configuration (<code>IConfiguration _configuration</code>) object into the class constructor. From there
                the info is available to be used throughout the class.
            </p>
            <p>
                For rendering, the configuration information is loaded into a <code>ViewModel (List<<text>ContactViewModel</text>>)</code> from the <code>Team</code> action in the <code>Home</code> controller:
                <code>_configuration.GetSection("Team").Get<<text>ContactViewModel</text>>()</code>.
            </p>
        </div>

    </div>

    @*Show only first team member*@

    <div class="info-col info-col-card">

        <div class="card-size">
            <div class="card-header">
                <h5><b>@Model.First().Name</b></h5>
            </div>
            <div class="card-body">
                <p class="list-group-item"><b>Position: </b> @Model.First().Position </p>
                <p class="list-group-item"><b>Email: </b> @Model.First().Email </p>
                <p class="list-group-item"><b>Street: </b> @Model.First().Street </p>
                <p class="list-group-item"><b>City: </b> @Model.First().City </p>
                <p class="list-group-item"><b>State: </b> @Model.First().State </p>
                <p class="list-group-item"><b>Zipcode: </b> @Model.First().Zipcode </p>
            </div>
        </div>

    </div>

</div>


<div class="info-row">

    @*Iterate through the rest of the list of team members*@

    <div class="info-col info-col-card info-col-card-fullrow">

        @foreach (var member in Model)
        {
            if (member != Model.First())
            {
                <div class="card-size">
                    <div class="card-header">
                        <h5><b>@member.Name</b></h5>
                    </div>
                    <div class="card-body">
                        <p class="list-group-item"><b>Position: </b> @member.Position </p>
                        <p class="list-group-item"><b>Email: </b> @member.Email </p>
                        <p class="list-group-item"><b>Street: </b> @member.Street </p>
                        <p class="list-group-item"><b>City: </b> @member.City </p>
                        <p class="list-group-item"><b>State: </b> @member.State </p>
                        <p class="list-group-item"><b>Zipcode: </b> @member.Zipcode </p>
                    </div>
                </div>
            }
        }

    </div>

</div>


